/*
Copyright 2024 ZNCDataDev.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package status

import (
	"fmt"

	apimeta "k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// Status defines the common status
type Status struct {
	// +kubebuilder:validation:Optional
	Conditions []metav1.Condition `json:"conditions,omitempty"`
	// +kubebuilder:validation:Optional
	URLs       []URL  `json:"urls,omitempty"`
	Generation int64  `json:"generation,omitempty"`
	Name       string `json:"name,omitempty"`
	Type       string `json:"type,omitempty"`
}

// IsAvailable returns true if the status is available.
func (status *Status) IsAvailable() bool {
	return apimeta.IsStatusConditionTrue(status.Conditions, ConditionTypeAvailable)
}

// SetStatusCondition sets the status condition.
func (status *Status) SetStatusCondition(condition metav1.Condition) (updated bool) {
	// if the condition already exists, update it
	existingCondition := apimeta.FindStatusCondition(status.Conditions, condition.Type)
	if existingCondition == nil {
		condition.ObservedGeneration = status.GetGeneration()
		condition.LastTransitionTime = metav1.Now()
		conditions := status.Conditions
		status.Conditions = append(conditions, condition)
		updated = true
	} else if existingCondition.Status != condition.Status || existingCondition.Reason != condition.Reason || existingCondition.Message != condition.Message {
		existingCondition.Status = condition.Status
		existingCondition.Reason = condition.Reason
		existingCondition.Message = condition.Message
		existingCondition.ObservedGeneration = status.GetGeneration()
		existingCondition.LastTransitionTime = metav1.Now()
		updated = true
	}
	return
}

// InitStatusConditions initializes the status conditions to the provided conditions.
func (status *Status) InitStatusConditions() {
	status.Conditions = []metav1.Condition{}
	status.SetStatusCondition(metav1.Condition{
		Type:               ConditionTypeProgressing,
		Status:             metav1.ConditionUnknown,
		Reason:             ConditionReasonPreparing,
		Message:            fmt.Sprintf("%s is preparing", status.Type),
		ObservedGeneration: status.GetGeneration(),
		LastTransitionTime: metav1.Now(),
	})
	status.SetStatusCondition(metav1.Condition{
		Type:               ConditionTypeAvailable,
		Status:             metav1.ConditionUnknown,
		Reason:             ConditionReasonPreparing,
		Message:            fmt.Sprintf("%s is preparing", status.Type),
		ObservedGeneration: status.GetGeneration(),
		LastTransitionTime: metav1.Now(),
	})
}

// InitStatus initializes the status.
func (status *Status) InitStatus(object client.Object) {
	generation := object.GetGeneration()
	name := object.GetName()
	kind := object.GetObjectKind().GroupVersionKind().Kind
	status.Generation = generation
	status.Name = name
	status.Type = kind
}

// GetGeneration returns the status's generation.
func (status *Status) GetGeneration() int64 {
	return status.Generation
}

// URL is a URL with a name
type URL struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Status) DeepCopyInto(out *Status) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.URLs != nil {
		in, out := &in.URLs, &out.URLs
		*out = make([]URL, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Status.
func (in *Status) DeepCopy() *Status {
	if in == nil {
		return nil
	}
	out := new(Status)
	in.DeepCopyInto(out)
	return out
}
